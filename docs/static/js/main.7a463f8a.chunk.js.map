{"version":3,"sources":["store/userSlice.ts","store/modalSlice.ts","store/taskSlice.ts","store/index.ts","components/LeftNav/index.tsx","utils/helper.ts","components/Dashboard/index.tsx","components/Home/index.tsx","components/LogIn/index.tsx","components/AddTask/index.tsx","components/AddTaskGroup/index.tsx","components/OpenSettings/index.tsx","components/Modal/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["userSlice","createSlice","name","initialState","userId","nickname","people","reducers","setUserId","state","action","payload","updateUserInfo","actions","modalSlice","showModal","modalScreen","setModal","taskSlice","taskGroups","tasks","selectedTaskGroup","selectedTaskItemToEdit","selectedTaskGroupItemToEdit","addTaskGroup","taskGrpId","uuidv4","addTask","taskId","deleteTask","currTasks","taskItemToEdit","setEditTaskGroup","deleteTaskGroup","Object","keys","length","updateTaskStatus","currTask","status","updateSelectedTaskGroup","persistConfig","key","storage","rootReducer","combineReducers","user","userReducer","modal","modalReducer","task","taskReducer","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","mapDispatch","connector","connect","className","onClick","map","taskGrp","push","join","e","stopPropagation","editTaskGroup","taskOptions","type","priority","getDate","date","d","Date","getMonth","getFullYear","useState","selFilter","setSelFilter","selFilterItem","setSelFilterItem","renderTasks","statusKey","nextTask","isAdd","checkStatus","title","curr_assignee","desc","finish_date","updateStatus","filType","item","st","index","Home","text","setText","error","setError","value","onChange","currentTarget","placeholder","uuidValidate","console","log","comments","created_date","updated_date","created_by","setCurrTask","comment","setComment","assignee","setAssignee","useEffect","required","disabled","format","tk","tkOpt","taskGroup","setTaskGroup","addGroup","onKeyUp","which","autoFocus","setName","newAssignee","setNewAssignee","maxLength","currAssignee","indexOf","splice","removeAssignee","downHandler","window","addEventListener","removeEventListener","renderTitle","renderModalContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.7a463f8a.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    userId: null,\n    nickname: '',\n    people: []\n  },\n  reducers: {\n    setUserId: (state, action) => {\n      state.userId = action.payload\n      state.nickname = 'John Doe'\n    },\n    updateUserInfo: (state, action) => {\n      state.nickname = action.payload.nickname\n      state.people = action.payload.people\n    }\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { setUserId, updateUserInfo } = userSlice.actions\n\nexport default userSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nexport const modalSlice = createSlice({\n  name: 'user',\n  initialState: {\n    showModal: false,\n    modalScreen: null\n  },\n  reducers: {\n    setModal: (state, action) => {\n      state.showModal = action.payload.showModal\n      state.modalScreen = action.payload.modalScreen\n    },\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { setModal } = modalSlice.actions\n\nexport default modalSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface TaskSliceState {\n  taskGroups: any;\n  tasks: any;\n  selectedTaskGroup: string;\n  selectedTaskItemToEdit: any;\n  selectedTaskGroupItemToEdit: null | string;\n}\nconst initialState:TaskSliceState = {\n  taskGroups: {},\n  tasks: {},\n  selectedTaskGroup: '',\n  selectedTaskItemToEdit: null,\n  selectedTaskGroupItemToEdit: null\n}\nexport const taskSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    addTaskGroup: (state, action) => {\n      if(action.payload.taskGrpId) {\n        state.taskGroups = {\n          ...state.taskGroups,\n          [action.payload.taskGrpId]: action.payload.name\n        }\n      } else {\n        const taskGrpId = uuidv4()\n        state.taskGroups = {\n          ...state.taskGroups,\n          [taskGrpId]: action.payload.name\n        }\n        state.tasks = {\n          ...state.tasks,\n          [taskGrpId]: {}\n        }\n        state.selectedTaskGroup = taskGrpId\n      }\n\n    },\n    addTask: (state, action) => {\n      if(action.payload.taskId) {\n        state.tasks = {\n          ...state.tasks,\n          [state.selectedTaskGroup]: {\n            ...state.tasks[state.selectedTaskGroup],\n            [action.payload.taskId]: action.payload\n          }\n        }\n      } else {\n        const taskId = uuidv4()\n        state.tasks = {\n          ...state.tasks,\n          [state.selectedTaskGroup]: {\n            ...state.tasks[state.selectedTaskGroup],\n            [taskId]: {\n              ...action.payload,\n              taskId\n            }\n          }\n        }\n      }\n    },\n    deleteTask: (state, action) => {\n      let currTasks = state.tasks[state.selectedTaskGroup]\n      delete currTasks[action.payload]\n      state.tasks = {\n        ...state.tasks,\n        [state.selectedTaskGroup]: currTasks\n      }\n    },\n    taskItemToEdit: (state, action) => {\n      state.selectedTaskItemToEdit = action.payload\n    },\n    setEditTaskGroup: (state, action) => {\n      state.selectedTaskGroupItemToEdit = action.payload\n    },\n    deleteTaskGroup: (state, action) => {\n      delete state.taskGroups[action.payload]\n      delete state.tasks[action.payload]\n      state.selectedTaskGroupItemToEdit = null\n      if(Object.keys(state.taskGroups).length > 0) {\n        state.selectedTaskGroup = Object.keys(state.taskGroups)[0]\n      } else {\n        state.selectedTaskGroup = ''\n      }\n    },\n    updateTaskStatus: (state, action) => {\n      const currTask = state.tasks[state.selectedTaskGroup][action.payload.taskId]\n      state.tasks = {\n        ...state.tasks,\n        [state.selectedTaskGroup]: {\n          ...state.tasks[state.selectedTaskGroup],\n          [action.payload.taskId]: {\n            ...currTask,\n            status: action.payload.status\n          }\n        }\n      }\n    },\n    updateSelectedTaskGroup: (state, action) => {\n      if(state.selectedTaskGroup !== action.payload) {\n        state.selectedTaskGroup = action.payload\n      }\n    }\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { addTaskGroup, updateSelectedTaskGroup, addTask, deleteTask, updateTaskStatus, taskItemToEdit, setEditTaskGroup, deleteTaskGroup } = taskSlice.actions\n\nexport default taskSlice.reducer\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { persistStore, persistReducer, FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER, } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nimport userReducer from './userSlice'\nimport modalReducer from './modalSlice'\nimport taskReducer from './taskSlice'\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  modal: modalReducer,\n  task: taskReducer\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n})\n\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default store\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"../../store\";\nimport {setModal} from \"../../store/modalSlice\"\nimport {updateSelectedTaskGroup, setEditTaskGroup} from \"../../store/taskSlice\"\n\nconst mapStateToProps = (state:RootState) => ({\n  userId: state.user.userId,\n  taskGroups: state.task.taskGroups,\n  selectedTaskGroup: state.task.selectedTaskGroup\n});\nconst mapDispatch = {\n  setModal,\n  updateSelectedTaskGroup,\n  setEditTaskGroup\n}\n\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype LeftNavProps = {\n  setModal: Function;\n  updateSelectedTaskGroup: Function;\n  setEditTaskGroup: Function;\n  taskGroups: any;\n  selectedTaskGroup: string;\n}\n\nfunction LeftNav({\n  setModal,\n  updateSelectedTaskGroup,\n  taskGroups = {},\n  selectedTaskGroup = '',\n  setEditTaskGroup\n}:LeftNavProps) {\n  function addTaskGroup() {\n    setEditTaskGroup(null)\n    setModal({\n      showModal: true,\n      modalScreen: 'ADD_TASK_GROUP'\n    })\n  }\n  function editTaskGroup(e:any, taskGrpId:string) {\n    e.stopPropagation()\n    setModal({\n      showModal: true,\n      modalScreen: 'ADD_TASK_GROUP'\n    })\n    setEditTaskGroup(taskGrpId)\n  }\n  function openSettings() {\n    setModal({\n      showModal: true,\n      modalScreen: 'OPEN_SETTINGS'\n    })\n  }\n  return (\n    <div className=\"left-nav-wrapper border-black\">\n      <div>\n        <button onClick={addTaskGroup} className=\"add-task-group-btn bg-primary color-white border-primary\">Add Task Group</button>\n        <div className=\"task-grp-wrapper\">\n          {\n            Object.keys(taskGroups).map((taskGrp) => {\n              const className = [\"border-black\"]\n              if(taskGrp === selectedTaskGroup) {\n                className.push(\"bg-primary\")\n                className.push(\"color-white\")\n              }\n              return (\n                <button\n                  key={taskGrp}\n                  className={className.join(' ')}\n                  onClick={() => updateSelectedTaskGroup(taskGrp)}>\n                  {taskGroups[taskGrp]}\n                  <div className=\"edit\" onClick={(e) => editTaskGroup(e, taskGrp)}>Edit</div>\n                </button>\n              )\n            })\n          }\n        </div>\n      </div>\n      <div>\n        <button className=\"bg-white color-black border-black settings-btn\" onClick={openSettings}>Settings</button>\n      </div>\n    </div>\n  )\n}\n\nexport default connector(LeftNav);\n","export const taskOptions:any = {\n  type: [{\n    key: 'task',\n    name: 'Task'\n  }, {\n    key: 'bug',\n    name: 'Bug'\n  }, {\n    key: 'feature',\n    name: 'Feature'\n  }],\n  priority: [{\n    key: 'p1',\n    name: 'P1'\n  }, {\n    key: 'p2',\n    name: 'P2'\n  }, {\n    key: 'p3',\n    name: 'P3'\n  }],\n  status: [{\n    key: 'not_started',\n    name: 'Not Started'\n  }, {\n    key: 'in_progress',\n    name: 'In Progress'\n  }, {\n    key: 'in_review',\n    name: 'In Review'\n  }, {\n    key: 'completed',\n    name: 'Completed'\n  }]\n}\n\nexport function getDate(date: string | number | Date) {\n  const d = new Date(date)\n  return d.getDate() + '/' + (d.getMonth() + 1) + '/' + d.getFullYear()\n}\n","import { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { RootState } from \"../../store\";\nimport {setModal} from \"../../store/modalSlice\";\nimport {deleteTask, updateTaskStatus, taskItemToEdit} from \"../../store/taskSlice\";\nimport { taskOptions} from \"../../utils/helper\";\n\nconst mapStateToProps = (state:RootState) => ({\n  selectedTaskGroup: state.task.selectedTaskGroup,\n  taskGroups: state.task.taskGroups,\n  tasks: state.task.tasks,\n  people: state.user.people,\n  nickname: state.user.nickname\n});\nconst mapDispatch = {\n  setModal,\n  deleteTask,\n  updateTaskStatus,\n  taskItemToEdit,\n}\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype DashboardProps = {\n  selectedTaskGroup: string;\n  taskGroups: any | {};\n  tasks: any;\n  setModal: Function;\n  deleteTask: Function;\n  updateTaskStatus: Function;\n  taskItemToEdit: Function;\n  people: Array<string>;\n  nickname: string;\n}\n\nfunction Dashboard({\n  selectedTaskGroup = '',\n  taskGroups = {},\n  tasks = {},\n  setModal,\n  deleteTask,\n  updateTaskStatus,\n  taskItemToEdit,\n  people,\n  nickname\n}:DashboardProps) {\n  const [selFilter, setSelFilter] = useState('')\n  const [selFilterItem, setSelFilterItem] = useState('')\n  const currTasks = tasks[selectedTaskGroup]\n\n  function deleteItem(itemId:string) {\n    deleteTask(itemId)\n  }\n\n  function editItem(itemId:string) {\n    taskItemToEdit(currTasks[itemId])\n    setModal({\n      showModal: true,\n      modalScreen: 'ADD_TASK'\n    })\n  }\n\n  function updateStatus(taskId:string, status:any) {\n    updateTaskStatus({\n      taskId,\n      status: status.key\n    })\n  }\n\n  function addTask() {\n    setModal({\n      showModal: true,\n      modalScreen: 'ADD_TASK'\n    })\n    taskItemToEdit(null)\n  }\n\n  function checkStatus(task:any) {\n    let isAdd = true\n    if(selFilter && selFilterItem) {\n      isAdd = false\n      if(task[selFilter] === selFilterItem) {\n        isAdd = true\n      }\n    }\n    return isAdd\n  }\n\n  function renderTasks(statusKey:string, key:number) {\n    return (\n      <div>\n        {\n          Object.keys(currTasks).map((taskId:string) => {\n            const task = currTasks[taskId]\n            const nextTask = taskOptions.status[key + 1]\n            const isAdd = checkStatus(task)\n            if(statusKey === task.status && isAdd) {\n              return (\n                <div key={taskId} className=\"task-item-wrapper\">\n                  <h5 className=\"bg-primary color-white title border-primary\">\n                    <span>{task.title}</span>\n                    <span>{task.curr_assignee}</span>\n                  </h5>\n                  <div className=\"task-item-content\">{task.desc}</div>\n                  <div className=\"task-item-info bg-primary color-white border-white\">\n                    <div className=\"border-white\">{task.priority}</div>\n                    <div className=\"border-white\">{task.type}</div>\n                    <div>{task.finish_date}</div>\n                  </div>\n                  {\n                    nextTask &&\n                    <div className=\"task-item-move\">\n                      <button onClick={() => updateStatus(taskId, nextTask)} className=\"bg-primary color-white\">Move to <b>{nextTask.name}</b></button>\n                    </div>\n                  }\n                  <div className=\"task-item-actions\">\n                    <button onClick={() => deleteItem(taskId)}>Delete</button>\n                    <button onClick={() => editItem(taskId)}>Edit</button>\n                  </div>\n                </div>\n              )\n            }\n            return null\n          })\n        }\n      </div>\n    )\n  }\n\n  function updateFilter(key:string) {\n    if(key === selFilter) {\n      setSelFilter('')\n    } else {\n      setSelFilter(key)\n    }\n    setSelFilterItem('')\n  }\n\n  function renderFilters() {\n    const filterTypes = [{\n      key: 'priority',\n      name: 'Priority'\n    }, {\n      key: 'curr_assignee',\n      name: 'Assignee',\n    }]\n    return (\n      <div className=\"filters-wrapper\">\n        <div className=\"filters-header\">\n          <h4>Filters</h4>\n          {\n            filterTypes.map((filType) => {\n              const className = filType.key === selFilter ? \"bg-white color-black border-black\" : \"bg-black color-white border-black\"\n              return (\n                <button className={className} onClick={() => updateFilter(filType.key)} key={'filter' + filType.key}>{filType.name}</button>\n              )\n            })\n          }\n        </div>\n        {\n          selFilter &&\n          <div className=\"filters-header border-black\">\n            {\n              selFilter === 'priority' &&\n              taskOptions[selFilter].map((item:any) => {\n                const className = item.key === selFilterItem ? \"bg-white color-black border-black\" : \"bg-black color-white border-black\"\n                return (\n                  <button className={className} onClick={() => setSelFilterItem(item.key)} key={'filterType' + item.key} >{item.name}</button>\n                )\n              })\n            }\n            {\n              selFilter === 'curr_assignee' &&\n              [nickname, ...people].map((name) => {\n                const className = name === selFilterItem ? \"bg-white color-black border-black\" : \"bg-black color-white border-black\"\n                return (\n                  <button className={className} onClick={() => setSelFilterItem(name)} key={'filterType' + name} >{name}</button>\n                )\n              })\n            }\n          </div>\n        }\n      </div>\n    )\n  }\n\n  if(selectedTaskGroup && currTasks) {\n    return (\n      <div className=\"dashboard-wrapper\">\n        <div className=\"header bg-black color-white\">\n          <button\n            className=\"bg-white color-black border-primary add-task\"\n            onClick={addTask}>\n            Add Task\n          </button>\n          <h3 className=\"title\">{taskGroups[selectedTaskGroup]}</h3>\n          <div />\n        </div>\n        {renderFilters()}\n        <div className=\"status-wrapper\">\n          {\n            taskOptions.status.map((st:any, index:number) => {\n              return (\n                <div key={st.key}>\n                  <h4 className=\"task-title bg-primary color-white border-white\">{st.name}</h4>\n                  {renderTasks(st.key, index)}\n                </div>\n              )\n            })\n          }\n        </div>\n      </div>\n    )\n  }\n  return (\n    <div className=\"dashboard-wrapper text-center\">No Task Groups Available. Create a Task Group to start creating tasks.</div>\n  )\n}\n\nexport default connector(Dashboard);\n","import LeftNav from '../LeftNav'\nimport Dashboard from '../Dashboard'\n\nfunction Home() {\n\n  return (\n    <div className=\"home-wrapper\">\n      <LeftNav />\n      <Dashboard />\n    </div>\n  )\n}\n\nexport default Home;\n","import { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { validate as uuidValidate } from 'uuid';\n\nimport {setUserId} from '../../store/userSlice'\n\nconst mapDispatch = {\n  setUserId,\n};\nconst connector = connect(null, mapDispatch);\n\ntype LogInProps = {\n  setUserId: Function;\n}\n\nfunction LogIn({\n  setUserId\n}:LogInProps) {\n  const [text, setText] = useState('')\n  const [error, setError] = useState('')\n  function onChange(e:any) {\n    setText(e.currentTarget.value)\n    setError('')\n  }\n  function handleLogIn() {\n    if(!uuidValidate(text)) {\n      setError('Invalid UUID Entered')\n    } else {\n      console.log('handleLogIn')\n    }\n  }\n  function generateUUIDAndLogIn() {\n    setUserId(uuidv4())\n  }\n  return (\n    <div className=\"login-wrapper bg-secondary\">\n      <button onClick={generateUUIDAndLogIn} className=\"bg-black color-white border-black generate-btn\">Click here to generate a UUID and Log In</button>\n      <div className=\"or\">OR</div>\n      <div className=\"have-uuid\">If you already have a UUID, then Enter below to Log In</div>\n      <div>\n        <input type=\"text\" value={text} onChange={onChange} className=\"border-black\" placeholder=\"Enter your UUID\" />\n        <button onClick={handleLogIn} className=\"bg-black color-white border-black\">Log In</button>\n      </div>\n      {\n        error &&\n        <div className=\"error-message color-red\">{error}</div>\n      }\n    </div>\n  );\n}\n\nexport default connector(LogIn);\n","import { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { RootState } from \"../../store\";\nimport {addTask} from \"../../store/taskSlice\"\nimport {setModal} from \"../../store/modalSlice\"\nimport {getDate, taskOptions} from \"../../utils/helper\"\n\nconst mapStateToProps = (state:RootState) => ({\n  nickname: state.user.nickname,\n  selectedTaskItemToEdit: state.task.selectedTaskItemToEdit,\n  people: state.user.people\n});\nconst mapDispatch = {\n  addTask,\n  setModal\n}\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype AddTaskProps = {\n  nickname: string;\n  selectedTaskItemToEdit: string;\n  addTask: Function;\n  setModal: Function;\n  people: Array<string>;\n}\n\nfunction AddTask({\n  nickname,\n  people,\n  selectedTaskItemToEdit,\n  addTask,\n  setModal\n}:AddTaskProps) {\n  const [currTask, setCurrTask] = useState<any>({\n    title: '',\n    desc: '',\n    type: 'task',\n    priority: 'p1',\n    status: 'not_started',\n    comments: [],\n    created_date: getDate(new Date()),\n    updated_date: getDate(new Date()),\n    finish_date: getDate(new Date()),\n    created_by: nickname,\n    curr_assignee: nickname\n  })\n  const [comment, setComment] = useState('')\n  const [assignee, setAssignee] = useState<Array<string>>([])\n\n  useEffect(() => {\n    if(selectedTaskItemToEdit) {\n      setCurrTask(selectedTaskItemToEdit)\n    }\n  }, [selectedTaskItemToEdit])\n  useEffect(() => {\n    setAssignee([nickname, ...people])\n  }, [people, nickname])\n  const taskItems = [{\n    title: 'Title',\n    key: 'title',\n    type: 'input',\n    required: true,\n    placeholder: 'Task Title'\n  }, {\n    title: 'Description',\n    key: 'desc',\n    type: 'input',\n    required: false,\n    placeholder: 'Task Description'\n  }, {\n    title: 'Type',\n    key: 'type',\n    type: 'select',\n    required: true,\n    placeholder: 'Task Type'\n  }, {\n    title: 'Status',\n    key: 'status',\n    type: 'select',\n    required: true,\n    placeholder: 'Task Status'\n  }, {\n    title: 'Priority',\n    key: 'priority',\n    type: 'select',\n    required: true,\n    placeholder: 'Task Priority'\n  }, {\n    title: 'Created Date',\n    key: 'created_date',\n    type: 'input',\n    disabled: true,\n    required: true,\n    format: 'date',\n    placeholder: 'Task Created Date'\n  }, {\n    title: 'Complete By',\n    key: 'finish_date',\n    type: 'input',\n    required: true,\n    format: 'date',\n    placeholder: 'Task Completion Date'\n  }, {\n    title: 'Updated Date',\n    key: 'updated_date',\n    type: 'input',\n    required: true,\n    format: 'date',\n    placeholder: 'Task Modified Date'\n  }, {\n    title: 'Created By',\n    key: 'created_by',\n    type: 'input',\n    required: true,\n    disabled: true,\n    placeholder: 'Task Created By'\n  }, {\n    title: 'Current Assignee',\n    key: 'curr_assignee',\n    type: 'select',\n    required: true,\n    placeholder: 'Task Assignee'\n  }]\n\n  function addItemTask() {\n    const task = {\n      ...currTask\n    }\n    if(comment.length > 0) {\n      task.comments = [...task.comments, comment]\n    }\n    addTask(task)\n    setModal({\n      showModal: false\n    })\n  }\n\n  function onChange(e:any) {\n    const name = e.currentTarget.name\n    const value = e.currentTarget.value\n    setCurrTask({\n      ...currTask,\n      [name]: value\n    })\n  }\n\n  return (\n    <div className=\"add-task-wrapper\">\n      <div className=\"add-task-content\">\n        <div className=\"add-task-section\">\n          {\n            taskItems.map((tk) => {\n              const key = tk.key\n              const value:any = currTask[key]\n              return (\n                <div key={key} className=\"add-task-item\">\n                  <h5>{tk.title} { tk.required && <span>*</span>}</h5>\n                  {\n                    tk.type === 'input' &&\n                    <input\n                      className=\"border-black\"\n                      type=\"text\" value={value}\n                      onChange={onChange}\n                      name={key}\n                      disabled={tk.disabled}\n                      placeholder={tk.placeholder} />\n                  }\n                  {\n                    tk.type === 'select' &&\n                    <select value={value} onChange={onChange} name={key} className=\"border-black\">\n                      {\n                        key !== 'curr_assignee' &&\n                        taskOptions[key].map((tkOpt:any) => {\n                          return (\n                            <option key={'opt_' + tkOpt.key} value={tkOpt.key}>{tkOpt.name}</option>\n                          )\n                        })\n                      }\n                      {\n                        key === 'curr_assignee' &&\n                        assignee.map((name) => {\n                          return (\n                            <option key={'opt_' + name} value={name}>{name}</option>\n                          )\n                        })\n                      }\n                    </select>\n                  }\n\n                </div>\n              )\n            })\n          }\n          <div className=\"add-task-item\">\n            <h5>Comment</h5>\n            <input\n              className=\"border-black\"\n              type=\"text\" value={comment}\n              onChange={(e:any) => setComment(e.currentTarget.value)}\n              name=\"comment\"\n              placeholder=\"Comment\" />\n          </div>\n        </div>\n        {\n          currTask.comments.length > 0 &&\n          <div className=\"comments-wrapper\">\n            <h5>Comments</h5>\n            {\n              currTask.comments.map((item:string) => {\n                return (\n                  <div key={'comment' + item} className=\"bg-black color-white border-white\">{item}</div>\n                )\n              })\n            }\n          </div>\n        }\n\n      </div>\n      <div className=\"save-btn-wrapper\">\n        <button onClick={addItemTask} className=\"saveBtn bg-primary color-white border-primary\">\n          {selectedTaskItemToEdit ? 'Update' : 'Save'}\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default connector(AddTask);\n","import { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { RootState } from \"../../store\";\nimport {addTaskGroup, deleteTaskGroup} from \"../../store/taskSlice\"\nimport {setModal} from \"../../store/modalSlice\"\n\nconst mapStateToProps = (state:RootState) => ({\n  selectedTaskGroupItemToEdit: state.task.selectedTaskGroupItemToEdit,\n  taskGroups: state.task.taskGroups\n});\nconst mapDispatch = {\n  addTaskGroup,\n  setModal,\n  deleteTaskGroup\n}\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype AddTaskGroupProps = {\n  addTaskGroup: Function;\n  setModal: Function;\n  selectedTaskGroupItemToEdit: null | string;\n  taskGroups: any;\n  deleteTaskGroup: Function;\n}\n\nfunction AddTaskGroup({\n  addTaskGroup,\n  setModal,\n  selectedTaskGroupItemToEdit,\n  taskGroups,\n  deleteTaskGroup\n}:AddTaskGroupProps) {\n  const [taskGroup, setTaskGroup] = useState('')\n\n  useEffect(() => {\n    if(selectedTaskGroupItemToEdit) {\n      setTaskGroup(taskGroups[selectedTaskGroupItemToEdit])\n    }\n  }, [selectedTaskGroupItemToEdit, taskGroups])\n\n  function onChange(e:any) {\n    setTaskGroup(e.currentTarget.value)\n  }\n  function onKeyUp(e:any) {\n    if(e.which === 13) {\n      addGroup()\n    }\n  }\n  function addGroup() {\n    if(taskGroup.length > 0) {\n      addTaskGroup({\n        name: taskGroup,\n        taskGrpId: selectedTaskGroupItemToEdit\n      })\n      setModal({\n        showModal: false\n      })\n    }\n  }\n\n  function deleteGroup() {\n    deleteTaskGroup(selectedTaskGroupItemToEdit)\n    setModal({\n      showModal: false\n    })\n  }\n\n  return (\n    <div className=\"add-task-group-wrapper\">\n      <div className=\"form-item\">\n        <h4>Task Group name</h4>\n        <input type=\"text\" value={taskGroup} onKeyUp={onKeyUp} onChange={onChange} className=\"border-black\" placeholder=\"Task Group Name\" autoFocus />\n      </div>\n      <div className=\"save-btn-wrapper\">\n        {\n          selectedTaskGroupItemToEdit &&\n          <button onClick={deleteGroup} className=\"saveBtn bg-primary color-white border-primary\">Delete</button>\n        }\n        <button onClick={addGroup} className=\"saveBtn bg-primary color-white border-primary\" disabled={!taskGroup}>Save</button>\n      </div>\n    </div>\n  )\n}\n\nexport default connector(AddTaskGroup);\n","import { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { RootState } from \"../../store\";\nimport {setModal} from '../../store/modalSlice'\nimport {updateUserInfo} from '../../store/userSlice'\n\nconst mapStateToProps = (state:RootState) => ({\n  nickname: state.user.nickname,\n  people: state.user.people\n});\nconst mapDispatch = {\n  setModal,\n  updateUserInfo\n};\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype OpenSettingsProps = {\n  setModal: Function;\n  updateUserInfo: Function;\n  nickname: string;\n  people: Array<string>;\n}\n\nfunction OpenSettings({\n  setModal,\n  updateUserInfo,\n  nickname = '',\n  people = []\n}:OpenSettingsProps) {\n  const [name, setName] = useState(nickname)\n  const [assignee, setAssignee] = useState<Array<string>>([...people])\n  const [newAssignee, setNewAssignee] = useState('')\n\n  function handleName(e:any) {\n    const value = e.currentTarget.value\n    setName(value)\n  }\n\n  function addNewAssignee() {\n    let currAssignee = [...assignee]\n    if(currAssignee.indexOf(newAssignee) === -1 && newAssignee !== nickname && newAssignee !== name) {\n      currAssignee.push(newAssignee)\n    }\n    setNewAssignee('')\n    setAssignee(currAssignee)\n  }\n\n  function removeAssignee(name:string) {\n    const index = assignee.indexOf(name)\n    let currAssignee = [...assignee]\n    currAssignee.splice(index, 1)\n    setAssignee(currAssignee)\n  }\n\n  function save() {\n    updateUserInfo({\n      nickname: name,\n      people: assignee,\n    })\n    setModal({\n      showModal: false\n    })\n  }\n  return (\n    <div className=\"settings-wrapper\">\n      <div>\n        <div className=\"form-item\">\n          <h5>User Nickname</h5>\n          <input type=\"text\" value={name} onChange={handleName} placeholder=\"User Nickname\" maxLength={20} />\n        </div>\n        <div className=\"form-item\">\n          <h5>New Assignee</h5>\n          <div>\n            <input type=\"text\" value={newAssignee} onChange={(e) => setNewAssignee(e.currentTarget.value)} placeholder=\"User Nickname\" maxLength={20} />\n            <button className=\"bg-primary color-white border-primary\" onClick={addNewAssignee} disabled={!newAssignee}>Add Assignee</button>\n          </div>\n        </div>\n        <div className=\"form-item\">\n          <h5>Current Assignees</h5>\n          <div>\n            {\n              assignee.map((name) => {\n                return (\n                  <div key={'name' + name} className=\"name-item bg-primary color-white\">\n                    <span>{name}</span>\n                    <button className=\"bg-white color-black border-white\" onClick={() => removeAssignee(name)}>X</button>\n                  </div>\n                )\n              })\n            }\n          </div>\n        </div>\n      </div>\n      <div className=\"save-btn-wrapper\">\n        <button className=\"bg-primary color-white border-primary saveBtn\" onClick={save} disabled={!name}>Update</button>\n      </div>\n    </div>\n  )\n}\n\nexport default connector(OpenSettings);\n","import { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { RootState } from \"../../store\";\nimport {setModal} from '../../store/modalSlice'\n\nimport AddTask from '../AddTask'\nimport AddTaskGroup from '../AddTaskGroup'\nimport OpenSettings from '../OpenSettings'\n\nconst mapStateToProps = (state:RootState) => ({\n  modalScreen: state.modal.modalScreen,\n  selectedTaskItemToEdit: state.task.selectedTaskItemToEdit\n});\nconst mapDispatch = {\n  setModal,\n};\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype ModalProps = {\n  modalScreen: string | null;\n  selectedTaskItemToEdit: string | null;\n  setModal: Function;\n}\n\nfunction Modal({\n  modalScreen,\n  selectedTaskItemToEdit,\n  setModal\n}:ModalProps) {\n\n  useEffect(() => {\n    function downHandler(e:any) {\n      if(e.which === 27) {\n        setModal({\n          showModal: false\n        })\n      }\n    }\n    window.addEventListener('keydown', downHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n    };\n  }, [setModal]);\n\n  function renderModalContent() {\n    switch (modalScreen) {\n      case 'ADD_TASK_GROUP':\n        return <AddTaskGroup />\n      case 'ADD_TASK':\n        return <AddTask />\n      case 'OPEN_SETTINGS':\n        return <OpenSettings />\n      default:\n        return null\n    }\n  }\n\n  function renderTitle() {\n    switch (modalScreen) {\n      case 'ADD_TASK_GROUP':\n        return 'Add Task Group'\n      case 'ADD_TASK':\n        return selectedTaskItemToEdit ? 'View/Edit Task' : 'Add Task'\n      case 'OPEN_SETTINGS':\n        return 'Settings'\n      default:\n        return null\n    }\n  }\n\n  return (\n    <div className=\"modal-wrapper bg-black\">\n      <div className=\"modal-section border-black bg-white\" onClick={(e) => e.stopPropagation()}>\n        <h2 className=\"title\">{renderTitle()}</h2>\n        {renderModalContent()}\n      </div>\n    </div>\n  )\n}\n\nexport default connector(Modal);\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"./store\";\nimport {setUserId} from './store/userSlice'\nimport './App.css';\n\nimport Home from './components/Home'\nimport LogIn from './components/LogIn'\nimport Modal from './components/Modal'\n\nconst mapStateToProps = (state:RootState) => ({\n  userId: state.user.userId,\n  showModal: state.modal.showModal\n});\nconst mapDispatch = {\n  setUserId,\n};\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype AppProps = {\n  userId: string | null;\n  showModal: boolean;\n}\n\nfunction App({\n  userId = null,\n  showModal = false\n}:AppProps) {\n  return (\n    <div>\n      <header className=\"bg-primary color-white\">\n        <h2>Task Manager</h2>\n      </header>\n      {\n        !userId &&\n        <LogIn />\n      }\n      {\n        userId &&\n        <Home />\n      }\n      {\n        showModal &&\n        <Modal />\n      }\n\n    </div>\n  )\n}\n\nexport default connector(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport './index.css';\nimport store, { persistor } from './store'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}