{"version":3,"sources":["store/userSlice.ts","store/modalSlice.ts","utils/helper.ts","store/taskSlice.ts","store/index.ts","components/LeftNav/index.tsx","components/Task/index.tsx","components/Dashboard/index.tsx","components/Home/index.tsx","components/AddTask/index.tsx","components/AddTaskGroup/index.tsx","components/OpenSettings/index.tsx","components/OpenArchive/index.tsx","components/Modal/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["userSlice","createSlice","name","initialState","nickname","people","reducers","updateUserInfo","state","action","payload","actions","modalSlice","showModal","modalScreen","setModal","ARCHIVE","taskOptions","type","key","priority","status","getDate","date","d","Date","getMonth","getFullYear","taskSlice","taskGroups","tasks","selectedTaskGroup","selectedTaskItemToEdit","selectedTaskGroupItemToEdit","archiveTasks","addTaskGroup","taskGrpId","uuidv4","addTask","taskId","deleteTask","page","currTasks","itemId","taskItemToEdit","setEditTaskGroup","deleteTaskGroup","Object","keys","length","updateTaskStatus","currTask","updateSelectedTaskGroup","persistConfig","storage","rootReducer","combineReducers","user","userReducer","modal","modalReducer","task","taskReducer","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","mapDispatch","connector","connect","className","onClick","map","taskGrp","push","join","e","stopPropagation","editTaskGroup","nextTaskName","nextTask","today","currDate","finish_date","titleClass","title","curr_assignee","desc","updateStatus","editItem","useState","selFilter","setSelFilter","selFilterItem","setSelFilterItem","renderTasks","statusKey","isAdd","checkStatus","renderDateFilter","allDates","indexOf","console","log","sort","filType","item","st","index","Home","comments","created_date","updated_date","created_by","setCurrTask","comment","setComment","assignee","setAssignee","onChange","currentTarget","value","useEffect","required","placeholder","disabled","format","tk","tkOpt","taskGroup","setTaskGroup","addGroup","onKeyUp","which","autoFocus","setName","newAssignee","setNewAssignee","maxLength","currAssignee","splice","removeAssignee","downHandler","window","addEventListener","removeEventListener","modalClass","renderTitle","renderModalContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.90f605ce.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    nickname: 'John Doe',\n    people: []\n  },\n  reducers: {\n    updateUserInfo: (state, action) => {\n      state.nickname = action.payload.nickname\n      state.people = action.payload.people\n    }\n  },\n})\n\nexport const { updateUserInfo } = userSlice.actions\n\nexport default userSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nexport const modalSlice = createSlice({\n  name: 'user',\n  initialState: {\n    showModal: false,\n    modalScreen: null\n  },\n  reducers: {\n    setModal: (state, action) => {\n      state.showModal = action.payload.showModal\n      state.modalScreen = action.payload.modalScreen\n    },\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { setModal } = modalSlice.actions\n\nexport default modalSlice.reducer\n","export const ARCHIVE = 'Archive'\nexport const NOT_STARTED = 'not_started'\nexport const taskOptions:any = {\n  type: [{\n    key: 'task',\n    name: 'Task'\n  }, {\n    key: 'bug',\n    name: 'Bug'\n  }, {\n    key: 'feature',\n    name: 'Feature'\n  }],\n  priority: [{\n    key: 'p1',\n    name: 'P1'\n  }, {\n    key: 'p2',\n    name: 'P2'\n  }, {\n    key: 'p3',\n    name: 'P3'\n  }],\n  status: [{\n    key: 'not_started',\n    name: 'Not Started'\n  }, {\n    key: 'in_progress',\n    name: 'In Progress'\n  }, {\n    key: 'in_review',\n    name: 'In Review'\n  }, {\n    key: 'completed',\n    name: 'Completed'\n  }]\n}\n\nexport function getDate(date: string | number | Date) {\n  const d = new Date(date)\n  return (d.getMonth() + 1) + '/' +  d.getDate() + '/' + d.getFullYear()\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport { v4 as uuidv4 } from 'uuid';\nimport {ARCHIVE} from '../utils/helper';\n\ninterface TaskSliceState {\n  taskGroups: any;\n  tasks: any;\n  selectedTaskGroup: string;\n  selectedTaskItemToEdit: any;\n  selectedTaskGroupItemToEdit: null | string;\n  archiveTasks: any;\n}\nconst initialState:TaskSliceState = {\n  taskGroups: {},\n  tasks: {},\n  selectedTaskGroup: '',\n  selectedTaskItemToEdit: null,\n  selectedTaskGroupItemToEdit: null,\n  archiveTasks: {}\n}\nexport const taskSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    addTaskGroup: (state, action) => {\n      if(action.payload.taskGrpId) {\n        state.taskGroups = {\n          ...state.taskGroups,\n          [action.payload.taskGrpId]: action.payload.name\n        }\n      } else {\n        const taskGrpId = uuidv4()\n        state.taskGroups = {\n          ...state.taskGroups,\n          [taskGrpId]: action.payload.name\n        }\n        state.tasks = {\n          ...state.tasks,\n          [taskGrpId]: {}\n        }\n        state.selectedTaskGroup = taskGrpId\n      }\n\n    },\n    addTask: (state, action) => {\n      if(action.payload.taskId) {\n        state.tasks = {\n          ...state.tasks,\n          [state.selectedTaskGroup]: {\n            ...state.tasks[state.selectedTaskGroup],\n            [action.payload.taskId]: action.payload\n          }\n        }\n      } else {\n        const taskId = uuidv4()\n        state.tasks = {\n          ...state.tasks,\n          [state.selectedTaskGroup]: {\n            ...state.tasks[state.selectedTaskGroup],\n            [taskId]: {\n              ...action.payload,\n              taskId\n            }\n          }\n        }\n      }\n    },\n    deleteTask: (state, action) => {\n      const payload = action.payload\n      if(payload.page === 'dashboard') {\n        let currTasks = state.tasks[state.selectedTaskGroup]\n        delete currTasks[payload.itemId]\n        state.tasks = {\n          ...state.tasks,\n          [state.selectedTaskGroup]: currTasks\n        }\n      } else {\n        let currTasks = state.archiveTasks[state.selectedTaskGroup]\n        delete currTasks[payload.itemId]\n        state.archiveTasks = {\n          ...state.archiveTasks,\n          [state.selectedTaskGroup]: currTasks\n        }\n      }\n    },\n    taskItemToEdit: (state, action) => {\n      state.selectedTaskItemToEdit = action.payload\n    },\n    setEditTaskGroup: (state, action) => {\n      state.selectedTaskGroupItemToEdit = action.payload\n    },\n    deleteTaskGroup: (state, action) => {\n      delete state.taskGroups[action.payload]\n      delete state.tasks[action.payload]\n      state.selectedTaskGroupItemToEdit = null\n      if(Object.keys(state.taskGroups).length > 0) {\n        state.selectedTaskGroup = Object.keys(state.taskGroups)[0]\n      } else {\n        state.selectedTaskGroup = ''\n      }\n    },\n    updateTaskStatus: (state, action) => {\n      const payload = action.payload\n      const currTask = state.tasks[state.selectedTaskGroup][payload.taskId]\n      if(payload.status === ARCHIVE) {\n        state.archiveTasks = {\n          ...state.archiveTasks,\n          [state.selectedTaskGroup]: {\n            ...state.tasks[state.selectedTaskGroup],\n            [payload.taskId]: {\n              ...currTask,\n              status: ARCHIVE\n            }\n          }\n        }\n        delete state.tasks[state.selectedTaskGroup][payload.taskId]\n      } else if(payload.status === 'not_started') {\n        const currTask = state.archiveTasks[state.selectedTaskGroup][payload.taskId]\n        state.tasks = {\n          ...state.tasks,\n          [state.selectedTaskGroup]: {\n            ...state.tasks[state.selectedTaskGroup],\n            [payload.taskId]: {\n              ...currTask,\n              status: payload.status\n            }\n          }\n        }\n        delete state.archiveTasks[state.selectedTaskGroup][payload.taskId]\n      } else {\n        state.tasks = {\n          ...state.tasks,\n          [state.selectedTaskGroup]: {\n            ...state.tasks[state.selectedTaskGroup],\n            [payload.taskId]: {\n              ...currTask,\n              status: payload.status\n            }\n          }\n        }\n      }\n    },\n    updateSelectedTaskGroup: (state, action) => {\n      if(state.selectedTaskGroup !== action.payload) {\n        state.selectedTaskGroup = action.payload\n      }\n    }\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { addTaskGroup, updateSelectedTaskGroup, addTask, deleteTask, updateTaskStatus, taskItemToEdit, setEditTaskGroup, deleteTaskGroup } = taskSlice.actions\n\nexport default taskSlice.reducer\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { persistStore, persistReducer, FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER, } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nimport userReducer from './userSlice'\nimport modalReducer from './modalSlice'\nimport taskReducer from './taskSlice'\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  modal: modalReducer,\n  task: taskReducer\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n})\n\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default store\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"../../store\";\nimport {setModal} from \"../../store/modalSlice\"\nimport {updateSelectedTaskGroup, setEditTaskGroup} from \"../../store/taskSlice\"\nimport \"./index.scss\"\n\nconst mapStateToProps = (state:RootState) => ({\n  taskGroups: state.task.taskGroups,\n  selectedTaskGroup: state.task.selectedTaskGroup\n});\nconst mapDispatch = {\n  setModal,\n  updateSelectedTaskGroup,\n  setEditTaskGroup\n}\n\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype LeftNavProps = {\n  setModal: Function;\n  updateSelectedTaskGroup: Function;\n  setEditTaskGroup: Function;\n  taskGroups: any;\n  selectedTaskGroup: string;\n}\n\nfunction LeftNav({\n  setModal,\n  updateSelectedTaskGroup,\n  taskGroups = {},\n  selectedTaskGroup = '',\n  setEditTaskGroup\n}:LeftNavProps) {\n  function addTaskGroup() {\n    setEditTaskGroup(null)\n    setModal({\n      showModal: true,\n      modalScreen: 'ADD_TASK_GROUP'\n    })\n  }\n  function editTaskGroup(e:any, taskGrpId:string) {\n    e.stopPropagation()\n    setModal({\n      showModal: true,\n      modalScreen: 'ADD_TASK_GROUP'\n    })\n    setEditTaskGroup(taskGrpId)\n  }\n  function openSettings() {\n    setModal({\n      showModal: true,\n      modalScreen: 'OPEN_SETTINGS'\n    })\n  }\n  function openArchive() {\n    setModal({\n      showModal: true,\n      modalScreen: 'OPEN_ARCHIVE'\n    })\n  }\n  return (\n    <div className=\"left-nav-wrapper border-black\">\n      <div>\n        <button onClick={addTaskGroup} className=\"add-task-group-btn bg-primary color-white border-primary\">Add Task Group</button>\n        <div className=\"task-grp-wrapper\">\n          {\n            Object.keys(taskGroups).map((taskGrp) => {\n              const className = [\"border-black\"]\n              if(taskGrp === selectedTaskGroup) {\n                className.push(\"bg-primary\")\n                className.push(\"color-white\")\n              }\n              return (\n                <button\n                  key={taskGrp}\n                  className={className.join(' ')}\n                  onClick={() => updateSelectedTaskGroup(taskGrp)}>\n                  {taskGroups[taskGrp]}\n                  <div className=\"edit\" onClick={(e) => editTaskGroup(e, taskGrp)}>Edit</div>\n                </button>\n              )\n            })\n          }\n        </div>\n      </div>\n      <div className=\"left-nav-bottom-section\">\n        <button className=\"bg-black color-white border-black settings-btn\" onClick={openArchive}>Archive</button>\n        <button className=\"bg-white color-black border-black settings-btn\" onClick={openSettings}>Settings</button>\n      </div>\n    </div>\n  )\n}\n\nexport default connector(LeftNav);\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"../../store\";\nimport {setModal} from \"../../store/modalSlice\";\nimport {deleteTask, updateTaskStatus, taskItemToEdit} from \"../../store/taskSlice\";\nimport { ARCHIVE, NOT_STARTED} from \"../../utils/helper\";\nimport \"./index.scss\"\n\nconst mapStateToProps = (state:RootState) => ({\n  selectedTaskGroup: state.task.selectedTaskGroup,\n  taskGroups: state.task.taskGroups,\n  tasks: state.task.tasks,\n  people: state.user.people,\n  nickname: state.user.nickname\n});\nconst mapDispatch = {\n  deleteTask,\n  updateTaskStatus,\n  taskItemToEdit,\n  setModal\n}\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype TaskProps = {\n  task: any;\n  taskId: string;\n  nextTaskName: string;\n  nextTask: any;\n  deleteTask: Function;\n  updateTaskStatus: Function;\n  taskItemToEdit: Function;\n  setModal: Function;\n  page: string;\n}\n\nexport function Task({\n  task,\n  taskId,\n  deleteTask,\n  updateTaskStatus,\n  setModal,\n  taskItemToEdit,\n  nextTaskName,\n  nextTask,\n  page = ''\n}:TaskProps) {\n  function deleteItem(itemId:string) {\n    deleteTask({\n      itemId,\n      page\n    })\n  }\n\n  function editItem(task:any) {\n    taskItemToEdit(task)\n    setModal({\n      showModal: true,\n      modalScreen: 'ADD_TASK'\n    })\n  }\n\n  function updateStatus(taskId:string, status:any) {\n    updateTaskStatus({\n      taskId,\n      status: status ? status.key : page === 'dashboard' ? ARCHIVE : NOT_STARTED\n    })\n  }\n  let className = 'task-item-wrapper'\n  if(page === 'open_archive') {\n    className += ' task-item-max'\n  }\n  const today = new Date()\n  const currDate = new Date(task.finish_date)\n  let titleClass = ''\n  if(task.status !== 'completed') {\n    if(currDate.getFullYear() < today.getFullYear()) {\n      titleClass = 'bg-red'\n    } else if(currDate.getFullYear() === today.getFullYear()) {\n      if(currDate.getMonth() < today.getMonth()) {\n        titleClass = 'bg-red'\n      } else if(currDate.getMonth() === today.getMonth()) {\n        if(currDate.getDate() < today.getDate()) {\n          titleClass = 'bg-red'\n        } else if(currDate.getDate() === today.getDate()) {\n          titleClass = 'bg-orange'\n        }\n      }\n    }\n  } else if(task.status === 'completed') {\n    if(currDate.getFullYear() === today.getFullYear() && currDate.getMonth() === today.getMonth() && currDate.getDate() === today.getDate()) {\n      titleClass = 'bg-green'\n    }\n  }\n  titleClass += ' bg-primary color-white title border-primary'\n  return (\n    <div key={taskId} className={className}>\n      <h5 className={titleClass}>\n        <span>{task.title}</span>\n        <span>{task.curr_assignee}</span>\n      </h5>\n      <div className=\"task-item-content\">{task.desc}</div>\n      <div className=\"task-item-info bg-primary color-white border-white\">\n        <div className=\"border-white\">{task.priority}</div>\n        <div className=\"border-white\">{task.type}</div>\n        <div>{task.finish_date}</div>\n      </div>\n      <div className=\"task-item-move\">\n        <button onClick={() => updateStatus(taskId, nextTask)} className=\"bg-primary color-white\">Move to <b>{nextTaskName}</b></button>\n      </div>\n      <div className=\"task-item-actions\">\n        <button onClick={() => deleteItem(taskId)}>Delete</button>\n        <button onClick={() => editItem(task)}>Edit</button>\n      </div>\n    </div>\n  )\n}\n\nexport default connector(Task)\n","import { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { RootState } from \"../../store\";\nimport {setModal} from \"../../store/modalSlice\";\nimport {deleteTask, updateTaskStatus, taskItemToEdit} from \"../../store/taskSlice\";\nimport { taskOptions, ARCHIVE} from \"../../utils/helper\";\nimport Task from \"../Task\"\nimport \"./index.scss\"\n\nconst mapStateToProps = (state:RootState) => ({\n  selectedTaskGroup: state.task.selectedTaskGroup,\n  taskGroups: state.task.taskGroups,\n  tasks: state.task.tasks,\n  people: state.user.people,\n  nickname: state.user.nickname\n});\nconst mapDispatch = {\n  setModal,\n  deleteTask,\n  updateTaskStatus,\n  taskItemToEdit,\n}\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype DashboardProps = {\n  selectedTaskGroup: string;\n  taskGroups: any | {};\n  tasks: any;\n  setModal: Function;\n  deleteTask: Function;\n  updateTaskStatus: Function;\n  taskItemToEdit: Function;\n  people: Array<string>;\n  nickname: string;\n}\n\nfunction Dashboard({\n  selectedTaskGroup = '',\n  taskGroups = {},\n  tasks = {},\n  setModal,\n  taskItemToEdit,\n  people,\n  nickname\n}:DashboardProps) {\n  const [selFilter, setSelFilter] = useState('')\n  const [selFilterItem, setSelFilterItem] = useState('')\n  const currTasks = tasks[selectedTaskGroup]\n\n  function addTask() {\n    setModal({\n      showModal: true,\n      modalScreen: 'ADD_TASK'\n    })\n    taskItemToEdit(null)\n  }\n\n  function checkStatus(task:any) {\n    let isAdd = true\n    if(selFilter && selFilterItem) {\n      isAdd = false\n      if(task[selFilter] === selFilterItem) {\n        isAdd = true\n      }\n    }\n    return isAdd\n  }\n\n  function renderTasks(statusKey:string, key:number) {\n    return (\n      <div>\n        {\n          Object.keys(currTasks).map((taskId:string) => {\n            const task = currTasks[taskId]\n            const nextTask = taskOptions.status[key + 1]\n            const nextTaskName = nextTask ? nextTask.name : ARCHIVE\n            const isAdd = checkStatus(task)\n            if(statusKey === task.status && isAdd) {\n              return (\n                <Task\n                  key={taskId}\n                  task={task}\n                  taskId={taskId}\n                  nextTask={nextTask}\n                  nextTaskName={nextTaskName}\n                  page=\"dashboard\"\n                 />\n              )\n            }\n            return null\n          })\n        }\n      </div>\n    )\n  }\n\n  function updateFilter(key:string) {\n    if(key === selFilter) {\n      setSelFilter('')\n    } else {\n      setSelFilter(key)\n    }\n    setSelFilterItem('')\n  }\n\n  function renderFilters() {\n    const filterTypes = [{\n      key: 'priority',\n      name: 'Priority'\n    }, {\n      key: 'curr_assignee',\n      name: 'Assignee',\n    }, {\n      key: 'type',\n      name: 'Type'\n    }, {\n      key: 'finish_date',\n      name: 'Complete By'\n    }]\n    return (\n      <div className=\"filters-wrapper\">\n        <div className=\"filters-header\">\n          <h4>Filters</h4>\n          {\n            filterTypes.map((filType) => {\n              const className = filType.key === selFilter ? \"bg-white color-black border-black\" : \"bg-black color-white border-black\"\n              return (\n                <button className={className} onClick={() => updateFilter(filType.key)} key={'filter' + filType.key}>{filType.name}</button>\n              )\n            })\n          }\n        </div>\n        {\n          selFilter &&\n          <div className=\"filters-header border-black\">\n            {\n              (selFilter === 'priority' || selFilter === 'type') &&\n              taskOptions[selFilter].map((item:any) => {\n                const className = item.key === selFilterItem ? \"bg-white color-black border-black\" : \"bg-black color-white border-black\"\n                return (\n                  <button className={className} onClick={() => setSelFilterItem(item.key)} key={'filterType' + item.key} >{item.name}</button>\n                )\n              })\n            }\n            {\n              selFilter === 'curr_assignee' &&\n              [nickname, ...people].map((name) => {\n                const className = name === selFilterItem ? \"bg-white color-black border-black\" : \"bg-black color-white border-black\"\n                return (\n                  <button className={className} onClick={() => setSelFilterItem(name)} key={'filterType' + name} >{name}</button>\n                )\n              })\n            }\n            {\n              selFilter === 'finish_date' &&\n              renderDateFilter(selFilter).map((date:string) => {\n                const className = date === selFilterItem ? \"bg-white color-black border-black\" : \"bg-black color-white border-black\"\n                const today = new Date()\n                const currDate = new Date(date)\n                let title = 'Future'\n                if(currDate.getFullYear() < today.getFullYear()) {\n                  title = 'Past'\n                } else if(currDate.getFullYear() === today.getFullYear()) {\n                  if(currDate.getMonth() < today.getMonth()) {\n                    title = 'Past'\n                  } else if(currDate.getMonth() === today.getMonth()) {\n                    if(currDate.getDate() < today.getDate()) {\n                      title = 'Past'\n                    } else if(currDate.getDate() === today.getDate()) {\n                      title = 'Today'\n                    }\n                  }\n                }\n                return (\n                  <button className={className} onClick={() => setSelFilterItem(date)} key={'filterType' + date} >{[date, title].join(', ')}</button>\n                )\n              })\n            }\n          </div>\n        }\n      </div>\n    )\n  }\n\n  function renderDateFilter(selFilter:string) {\n    const allDates:any = []\n    Object.keys(currTasks).map((taskId:string) => {\n      const task = currTasks[taskId]\n      if(allDates.indexOf(task[selFilter]) === -1) {\n        allDates.push(task[selFilter])\n      }\n      return null\n    })\n    console.log(allDates)\n    return allDates.sort()\n  }\n\n  if(selectedTaskGroup && currTasks) {\n    return (\n      <div className=\"dashboard-wrapper border-white\">\n        <div className=\"header bg-black color-white\">\n          <button\n            className=\"bg-white color-black border-primary add-task\"\n            onClick={addTask}>\n            Add Task\n          </button>\n          <h3 className=\"title\">{taskGroups[selectedTaskGroup]}</h3>\n          <div />\n        </div>\n        {renderFilters()}\n        <div className=\"status-wrapper\">\n          {\n            taskOptions.status.map((st:any, index:number) => {\n              return (\n                <div key={st.key}>\n                  <h4 className=\"task-title bg-primary color-white border-white\">{st.name}</h4>\n                  {renderTasks(st.key, index)}\n                </div>\n              )\n            })\n          }\n        </div>\n      </div>\n    )\n  }\n  return (\n    <div className=\"dashboard-wrapper text-center\">No Task Groups Available. Create a Task Group to start creating tasks.</div>\n  )\n}\n\nexport default connector(Dashboard);\n","import LeftNav from '../LeftNav'\nimport Dashboard from '../Dashboard'\n\nimport './index.scss';\n\nfunction Home() {\n\n  return (\n    <div className=\"home-wrapper\">\n      <LeftNav />\n      <Dashboard />\n    </div>\n  )\n}\n\nexport default Home;\n","import { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { RootState } from \"../../store\";\nimport {addTask} from \"../../store/taskSlice\"\nimport {setModal} from \"../../store/modalSlice\"\nimport {getDate, taskOptions} from \"../../utils/helper\"\nimport \"./index.scss\"\n\nconst mapStateToProps = (state:RootState) => ({\n  nickname: state.user.nickname,\n  selectedTaskItemToEdit: state.task.selectedTaskItemToEdit,\n  people: state.user.people\n});\nconst mapDispatch = {\n  addTask,\n  setModal\n}\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype AddTaskProps = {\n  nickname: string;\n  selectedTaskItemToEdit: string;\n  addTask: Function;\n  setModal: Function;\n  people: Array<string>;\n}\n\nfunction AddTask({\n  nickname,\n  people,\n  selectedTaskItemToEdit,\n  addTask,\n  setModal\n}:AddTaskProps) {\n  const [currTask, setCurrTask] = useState<any>({\n    title: '',\n    desc: '',\n    type: 'task',\n    priority: 'p1',\n    status: 'not_started',\n    comments: [],\n    created_date: getDate(new Date()),\n    updated_date: getDate(new Date()),\n    finish_date: getDate(new Date()),\n    created_by: nickname,\n    curr_assignee: nickname\n  })\n  const [comment, setComment] = useState('')\n  const [assignee, setAssignee] = useState<Array<string>>([])\n\n  useEffect(() => {\n    if(selectedTaskItemToEdit) {\n      setCurrTask(selectedTaskItemToEdit)\n    }\n  }, [selectedTaskItemToEdit])\n  useEffect(() => {\n    setAssignee([nickname, ...people])\n  }, [people, nickname])\n  const taskItems = [{\n    title: 'Title',\n    key: 'title',\n    type: 'input',\n    required: true,\n    placeholder: 'Task Title'\n  }, {\n    title: 'Description',\n    key: 'desc',\n    type: 'input',\n    required: false,\n    placeholder: 'Task Description'\n  }, {\n    title: 'Type',\n    key: 'type',\n    type: 'select',\n    required: true,\n    placeholder: 'Task Type'\n  }, {\n    title: 'Status',\n    key: 'status',\n    type: 'select',\n    required: true,\n    placeholder: 'Task Status'\n  }, {\n    title: 'Priority',\n    key: 'priority',\n    type: 'select',\n    required: true,\n    placeholder: 'Task Priority'\n  }, {\n    title: 'Created Date',\n    key: 'created_date',\n    type: 'input',\n    disabled: true,\n    required: true,\n    format: 'date',\n    placeholder: 'Task Created Date'\n  }, {\n    title: 'Complete By',\n    key: 'finish_date',\n    type: 'input',\n    required: true,\n    format: 'date',\n    placeholder: 'Task Completion Date'\n  }, {\n    title: 'Updated Date',\n    key: 'updated_date',\n    type: 'input',\n    required: true,\n    format: 'date',\n    placeholder: 'Task Modified Date'\n  }, {\n    title: 'Created By',\n    key: 'created_by',\n    type: 'input',\n    required: true,\n    disabled: true,\n    placeholder: 'Task Created By'\n  }, {\n    title: 'Current Assignee',\n    key: 'curr_assignee',\n    type: 'select',\n    required: true,\n    placeholder: 'Task Assignee'\n  }]\n\n  function addItemTask() {\n    const task = {\n      ...currTask\n    }\n    if(comment.length > 0) {\n      task.comments = [...task.comments, comment]\n    }\n    addTask(task)\n    setModal({\n      showModal: false\n    })\n  }\n\n  function onChange(e:any) {\n    const name = e.currentTarget.name\n    const value = e.currentTarget.value\n    setCurrTask({\n      ...currTask,\n      [name]: value\n    })\n  }\n\n  return (\n    <div className=\"add-task-wrapper\">\n      <div className=\"add-task-content\">\n        <div className=\"add-task-section\">\n          {\n            taskItems.map((tk) => {\n              const key = tk.key\n              const value:any = currTask[key]\n              return (\n                <div key={key} className=\"add-task-item\">\n                  <h5>{tk.title} { tk.required && <span>*</span>}</h5>\n                  {\n                    tk.type === 'input' &&\n                    <input\n                      className=\"border-black\"\n                      type=\"text\" value={value}\n                      onChange={onChange}\n                      name={key}\n                      disabled={tk.disabled}\n                      placeholder={tk.placeholder} />\n                  }\n                  {\n                    tk.type === 'select' &&\n                    <select value={value} onChange={onChange} name={key} className=\"border-black\">\n                      {\n                        key !== 'curr_assignee' &&\n                        taskOptions[key].map((tkOpt:any) => {\n                          return (\n                            <option key={'opt_' + tkOpt.key} value={tkOpt.key}>{tkOpt.name}</option>\n                          )\n                        })\n                      }\n                      {\n                        key === 'curr_assignee' &&\n                        assignee.map((name) => {\n                          return (\n                            <option key={'opt_' + name} value={name}>{name}</option>\n                          )\n                        })\n                      }\n                    </select>\n                  }\n\n                </div>\n              )\n            })\n          }\n          <div className=\"add-task-item\">\n            <h5>Comment</h5>\n            <input\n              className=\"border-black\"\n              type=\"text\" value={comment}\n              onChange={(e:any) => setComment(e.currentTarget.value)}\n              name=\"comment\"\n              placeholder=\"Comment\" />\n          </div>\n        </div>\n        {\n          currTask.comments.length > 0 &&\n          <div className=\"comments-wrapper\">\n            <h5>Comments</h5>\n            {\n              currTask.comments.map((item:string) => {\n                return (\n                  <div key={'comment' + item} className=\"bg-black color-white border-white\">{item}</div>\n                )\n              })\n            }\n          </div>\n        }\n\n      </div>\n      <div className=\"save-btn-wrapper\">\n        <button onClick={addItemTask} className=\"saveBtn bg-primary color-white border-primary\">\n          {selectedTaskItemToEdit ? 'Update' : 'Save'}\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default connector(AddTask);\n","import { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { RootState } from \"../../store\";\nimport {addTaskGroup, deleteTaskGroup} from \"../../store/taskSlice\"\nimport {setModal} from \"../../store/modalSlice\"\nimport \"./index.scss\";\n\nconst mapStateToProps = (state:RootState) => ({\n  selectedTaskGroupItemToEdit: state.task.selectedTaskGroupItemToEdit,\n  taskGroups: state.task.taskGroups\n});\nconst mapDispatch = {\n  addTaskGroup,\n  setModal,\n  deleteTaskGroup\n}\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype AddTaskGroupProps = {\n  addTaskGroup: Function;\n  setModal: Function;\n  selectedTaskGroupItemToEdit: null | string;\n  taskGroups: any;\n  deleteTaskGroup: Function;\n}\n\nfunction AddTaskGroup({\n  addTaskGroup,\n  setModal,\n  selectedTaskGroupItemToEdit,\n  taskGroups,\n  deleteTaskGroup\n}:AddTaskGroupProps) {\n  const [taskGroup, setTaskGroup] = useState('')\n\n  useEffect(() => {\n    if(selectedTaskGroupItemToEdit) {\n      setTaskGroup(taskGroups[selectedTaskGroupItemToEdit])\n    }\n  }, [selectedTaskGroupItemToEdit, taskGroups])\n\n  function onChange(e:any) {\n    setTaskGroup(e.currentTarget.value)\n  }\n  function onKeyUp(e:any) {\n    if(e.which === 13) {\n      addGroup()\n    }\n  }\n  function addGroup() {\n    if(taskGroup.length > 0) {\n      addTaskGroup({\n        name: taskGroup,\n        taskGrpId: selectedTaskGroupItemToEdit\n      })\n      setModal({\n        showModal: false\n      })\n    }\n  }\n\n  function deleteGroup() {\n    deleteTaskGroup(selectedTaskGroupItemToEdit)\n    setModal({\n      showModal: false\n    })\n  }\n\n  return (\n    <div className=\"add-task-group-wrapper\">\n      <div className=\"form-item\">\n        <h4>Task Group name</h4>\n        <input type=\"text\" value={taskGroup} onKeyUp={onKeyUp} onChange={onChange} className=\"border-black\" placeholder=\"Task Group Name\" autoFocus />\n      </div>\n      <div className=\"save-btn-wrapper\">\n        {\n          selectedTaskGroupItemToEdit &&\n          <button onClick={deleteGroup} className=\"saveBtn bg-primary color-white border-primary\">Delete</button>\n        }\n        <button onClick={addGroup} className=\"saveBtn bg-primary color-white border-primary\" disabled={!taskGroup}>Save</button>\n      </div>\n    </div>\n  )\n}\n\nexport default connector(AddTaskGroup);\n","import { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { RootState } from \"../../store\";\nimport {setModal} from '../../store/modalSlice'\nimport {updateUserInfo} from '../../store/userSlice'\nimport \"./index.scss\"\n\nconst mapStateToProps = (state:RootState) => ({\n  nickname: state.user.nickname,\n  people: state.user.people\n});\nconst mapDispatch = {\n  setModal,\n  updateUserInfo\n};\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype OpenSettingsProps = {\n  setModal: Function;\n  updateUserInfo: Function;\n  nickname: string;\n  people: Array<string>;\n}\n\nfunction OpenSettings({\n  setModal,\n  updateUserInfo,\n  nickname = '',\n  people = []\n}:OpenSettingsProps) {\n  const [name, setName] = useState(nickname)\n  const [assignee, setAssignee] = useState<Array<string>>([...people])\n  const [newAssignee, setNewAssignee] = useState('')\n\n  function handleName(e:any) {\n    const value = e.currentTarget.value\n    setName(value)\n  }\n\n  function addNewAssignee() {\n    let currAssignee = [...assignee]\n    if(currAssignee.indexOf(newAssignee) === -1 && newAssignee !== nickname && newAssignee !== name) {\n      currAssignee.push(newAssignee)\n    }\n    setNewAssignee('')\n    setAssignee(currAssignee)\n  }\n\n  function removeAssignee(name:string) {\n    const index = assignee.indexOf(name)\n    let currAssignee = [...assignee]\n    currAssignee.splice(index, 1)\n    setAssignee(currAssignee)\n  }\n\n  function save() {\n    updateUserInfo({\n      nickname: name,\n      people: assignee,\n    })\n    setModal({\n      showModal: false\n    })\n  }\n  return (\n    <div className=\"settings-wrapper\">\n      <div>\n        <div className=\"form-item\">\n          <h5>User Nickname</h5>\n          <input type=\"text\" value={name} onChange={handleName} placeholder=\"User Nickname\" maxLength={20} />\n        </div>\n        <div className=\"form-item\">\n          <h5>New Assignee</h5>\n          <div>\n            <input type=\"text\" value={newAssignee} onChange={(e) => setNewAssignee(e.currentTarget.value)} placeholder=\"User Nickname\" maxLength={20} />\n            <button className=\"bg-primary color-white border-primary\" onClick={addNewAssignee} disabled={!newAssignee}>Add Assignee</button>\n          </div>\n        </div>\n        <div className=\"form-item\">\n          <h5>Current Assignees</h5>\n          <div>\n            {\n              assignee.map((name) => {\n                return (\n                  <div key={'name' + name} className=\"name-item bg-primary color-white\">\n                    <span>{name}</span>\n                    <button className=\"bg-white color-black border-white\" onClick={() => removeAssignee(name)}>X</button>\n                  </div>\n                )\n              })\n            }\n          </div>\n        </div>\n      </div>\n      <div className=\"save-btn-wrapper\">\n        <button className=\"bg-primary color-white border-primary saveBtn\" onClick={save} disabled={!name}>Update</button>\n      </div>\n    </div>\n  )\n}\n\nexport default connector(OpenSettings);\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"../../store\";\nimport {setModal} from '../../store/modalSlice'\nimport Task from \"../Task\"\nimport \"./index.scss\"\n\nconst mapStateToProps = (state:RootState) => ({\n  archiveTasks: state.task.archiveTasks,\n  selectedTaskGroup: state.task.selectedTaskGroup\n});\nconst mapDispatch = {\n  setModal,\n};\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype OpenArchiveProps = {\n  archiveTasks: any,\n  selectedTaskGroup: string;\n  setModal: Function;\n}\n\nfunction OpenArchive({\n  archiveTasks,\n  selectedTaskGroup,\n}:OpenArchiveProps) {\n  const tasks  = archiveTasks[selectedTaskGroup]\n  return (\n    <div className=\"bg-white open-archive-wrapper\">\n      {\n          tasks && Object.keys(tasks).length > 0 &&\n          Object.keys(tasks).map((taskId:string) => {\n          const task:any = tasks[taskId]\n          return (\n            <Task\n              key={taskId}\n              task={task}\n              taskId={taskId}\n              nextTask={null}\n              nextTaskName={'Not Started'}\n              page=\"open_archive\"\n             />\n           )\n        })\n      }\n      {\n        (!tasks || Object.keys(tasks).length === 0) &&\n        <p className=\"text-center\">No tasks in archive for the selected Task Group</p>\n      }\n    </div>\n  )\n}\n\nexport default connector(OpenArchive);\n","import { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { RootState } from \"../../store\";\nimport {setModal} from '../../store/modalSlice'\n\nimport AddTask from '../AddTask'\nimport AddTaskGroup from '../AddTaskGroup'\nimport OpenSettings from '../OpenSettings'\nimport OpenArchive from '../OpenArchive'\nimport \"./index.scss\"\n\nconst mapStateToProps = (state:RootState) => ({\n  modalScreen: state.modal.modalScreen,\n  selectedTaskItemToEdit: state.task.selectedTaskItemToEdit\n});\nconst mapDispatch = {\n  setModal,\n};\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype ModalProps = {\n  modalScreen: string | null;\n  selectedTaskItemToEdit: string | null;\n  setModal: Function;\n}\n\nfunction Modal({\n  modalScreen,\n  selectedTaskItemToEdit,\n  setModal\n}:ModalProps) {\n\n  useEffect(() => {\n    function downHandler(e:any) {\n      if(e.which === 27) {\n        setModal({\n          showModal: false\n        })\n      }\n    }\n    window.addEventListener('keydown', downHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n    };\n  }, [setModal]);\n\n  function renderModalContent() {\n    switch (modalScreen) {\n      case 'ADD_TASK_GROUP':\n        return <AddTaskGroup />\n      case 'ADD_TASK':\n        return <AddTask />\n      case 'OPEN_SETTINGS':\n        return <OpenSettings />\n      case 'OPEN_ARCHIVE':\n        return <OpenArchive />\n      default:\n        return null\n    }\n  }\n\n  function renderTitle() {\n    switch (modalScreen) {\n      case 'ADD_TASK_GROUP':\n        return 'Add Task Group'\n      case 'ADD_TASK':\n        return selectedTaskItemToEdit ? 'View/Edit Task' : 'Add Task'\n      case 'OPEN_SETTINGS':\n        return 'Settings'\n      case 'OPEN_ARCHIVE':\n        return 'Archive'\n      default:\n        return null\n    }\n  }\n\n  let modalClass = 'modal-section border-black bg-white'\n  if(modalScreen === 'OPEN_ARCHIVE') {\n    modalClass += ' modal-full'\n  }\n  return (\n    <div className=\"modal-wrapper bg-black\">\n      <div className={modalClass} onClick={(e) => e.stopPropagation()}>\n        <h2 className=\"title\">{renderTitle()}</h2>\n        {renderModalContent()}\n      </div>\n    </div>\n  )\n}\n\nexport default connector(Modal);\n","import { connect } from \"react-redux\";\n\nimport { RootState } from \"./store\";\nimport './App.scss';\n\nimport Home from './components/Home'\nimport Modal from './components/Modal'\n\nconst mapStateToProps = (state:RootState) => ({\n  showModal: state.modal.showModal\n});\n\nconst connector = connect(mapStateToProps);\n\ntype AppProps = {\n  showModal: boolean;\n}\n\nfunction App({\n  showModal = false\n}:AppProps) {\n  return (\n    <div>\n      <header className=\"bg-primary color-white\">\n        <h2>Task Manager</h2>\n      </header>\n      <Home />\n      {\n        showModal &&\n        <Modal />\n      }\n\n    </div>\n  )\n}\n\nexport default connector(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport './index.scss';\nimport store, { persistor } from './store'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}